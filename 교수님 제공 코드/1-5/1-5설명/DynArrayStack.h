// 두근두근 C자료구조(최영규, 생능 출판사, 2024)
// 참고파일 ch05/DynArrayStack.h

//-------------------------------------------------------------
// 코드 5.2 동적 할당을 이용한 배열기반 스택
//-------------------------------------------------------------
/*
 * [프로그램 설명]
 * 이 헤더 파일은 동적 메모리 할당을 이용한 배열 기반 스택의 구현을 제공합니다.
 * 일반 배열 기반 스택과 달리 스택이 가득 차면 크기를 동적으로 확장할 수 있습니다.
 * realloc 함수를 이용하여 메모리를 재할당하고 용량을 늘리는 방식을 사용합니다.
 */

// 스택의 구조체(Element는 이미 정의되어 있어야 함)
int MAX_SIZE = 10;    // 초기 최대 크기 (가변적으로 변경됨)
Element* data = NULL; // 데이터를 저장할 동적 배열
int top;              // 스택의 top 인덱스

//-------------------------------------------------------------
/*
 * [에러 처리 함수]
 * 오류 메시지를 출력하고 프로그램을 종료하는 함수
 */
void error(char str[])
{
    printf("%s\n", str);
    exit(1);
}

/*
 * [스택 공백 상태 확인 함수]
 * top이 -1이면 스택이 비어있는 상태
 * 반환값: 스택이 비어있으면 1, 그렇지 않으면 0
 */
int is_empty()
{
    if (top == -1) return 1;
    else return 0;
}

/*
 * [스택 포화 상태 확인 함수]
 * top이 MAX_SIZE-1이면 스택이 가득 찬 상태
 * 반환값: 스택이 가득 찼으면 1, 그렇지 않으면 0
 * 
 * 참고: 이 구현에서는 스택이 가득 차면 크기를 확장하므로,
 * is_full()이 1을 반환하는 상태는 일시적인 것임
 */
int is_full()
{
    return (top == (MAX_SIZE - 1));
}
//-------------------------------------------------------------

/*
 * [스택 초기화 함수]
 * 스택을 초기화하는 함수
 * 
 * [동작 과정]
 * 1. 초기 크기(MAX_SIZE)만큼 메모리 동적 할당
 * 2. top을 -1로 초기화 (빈 스택 상태)
 */
void init_stack()
{
    data = (Element*)malloc(sizeof(Element) * MAX_SIZE);
    top = -1;
}

/*
 * [스택 삽입 함수]
 * 스택에 새로운 요소를 추가하는 함수
 * 매개변수: 추가할 데이터
 * 
 * [동작 과정]
 * 1. 스택이 가득 찼는지 확인
 * 2. 가득 찬 경우, MAX_SIZE를 두 배로 늘리고 메모리 재할당
 * 3. top을 증가시키고 해당 위치에 데이터 저장
 */
void push(Element e)
{
    if (is_full()) {
        MAX_SIZE *= 2; // 용량을 두 배 올림
        data = (Element*)realloc(data, sizeof(Element) * MAX_SIZE);
        printf("realloc(%d)\n", MAX_SIZE);
        // error("Overflow Error!"); // 주석 처리됨 - 더 이상 오버플로우 에러가 발생하지 않음
    }
    data[++top] = e;
}

//-------------------------------------------------------------
/*
 * [스택 삭제 함수]
 * 스택의 맨 위 요소를 제거하고 반환하는 함수
 * 반환값: 제거된 요소
 * 
 * [동작 과정]
 * 1. 스택이 비어있는지 확인
 * 2. top 위치의 데이터를 반환하고 top 감소
 */
Element pop()
{
    if (is_empty())
        error("Underflow Error!");
    return data[top--];
}

/*
 * [스택 조회(peek) 함수]
 * 스택의 맨 위 요소를 제거하지 않고 값만 반환하는 함수
 * 반환값: 맨 위 요소의 값
 */
Element peek()
{
    if (is_empty())
        error("Underflow Error!");
    return data[top];
}
